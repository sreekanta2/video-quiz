{"ast":null,"code":"var _s = $RefreshSig$();\nimport { get, getDatabase, orderByKey, query, ref } from \"firebase/database\";\nimport { useEffect, useState } from \"react\";\nexport default function useQuestions(youtubeID) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(true);\n  const [questions, setQuestions] = useState([]);\n  useEffect(() => {\n    async function fetchVideos() {\n      const db = getDatabase();\n      const questionsRef = ref(db, `questions/${youtubeID}`);\n      const questionsQuery = query(questionsRef, orderByKey());\n      try {\n        setLoading(true);\n        setError(false);\n        const snapshot = await get(questionsQuery);\n        if (snapshot.exists()) {\n          setQuestions(prevVedios => {\n            return [...prevVedios, ...Object.values(snapshot.val())];\n          });\n        } else {\n          //\n        }\n      } catch (error) {\n        setLoading(false);\n        setError(true);\n      }\n      setLoading(false);\n    }\n    setTimeout(() => {\n      fetchVideos();\n    }, 2000);\n  }, [youtubeID]);\n  return {\n    loading,\n    error,\n    questions\n  };\n}\n_s(useQuestions, \"SlP9iAJIBlchs7r0bNrVC9EL+sI=\");","map":{"version":3,"names":["get","getDatabase","orderByKey","query","ref","useEffect","useState","useQuestions","youtubeID","_s","loading","setLoading","error","setError","questions","setQuestions","fetchVideos","db","questionsRef","questionsQuery","snapshot","exists","prevVedios","Object","values","val","setTimeout"],"sources":["/home/mint/Desktop/react/quiz/src/hooks/useQuestions.js"],"sourcesContent":["import { get, getDatabase, orderByKey, query, ref } from \"firebase/database\";\nimport { useEffect, useState } from \"react\";\n\nexport default function useQuestions(youtubeID) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(true);\n  const [questions, setQuestions] = useState([]);\n\n  useEffect(() => {\n    async function fetchVideos() {\n      const db = getDatabase();\n      const questionsRef = ref(db, `questions/${youtubeID}`);\n      const questionsQuery = query(questionsRef, orderByKey());\n      try {\n        setLoading(true);\n        setError(false);\n        const snapshot = await get(questionsQuery);\n        if (snapshot.exists()) {\n          setQuestions((prevVedios) => {\n            return [...prevVedios, ...Object.values(snapshot.val())];\n          });\n        } else {\n          //\n        }\n      } catch (error) {\n        setLoading(false);\n        setError(true);\n      }\n      setLoading(false);\n    }\n    setTimeout(() => {\n      fetchVideos();\n    }, 2000);\n  }, [youtubeID]);\n  return {\n    loading,\n    error,\n    questions,\n  };\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAEC,GAAG,QAAQ,mBAAmB;AAC5E,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,YAAYA,CAACC,SAAS,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,eAAeW,WAAWA,CAAA,EAAG;MAC3B,MAAMC,EAAE,GAAGhB,WAAW,EAAE;MACxB,MAAMiB,YAAY,GAAGd,GAAG,CAACa,EAAE,EAAG,aAAYT,SAAU,EAAC,CAAC;MACtD,MAAMW,cAAc,GAAGhB,KAAK,CAACe,YAAY,EAAEhB,UAAU,EAAE,CAAC;MACxD,IAAI;QACFS,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,KAAK,CAAC;QACf,MAAMO,QAAQ,GAAG,MAAMpB,GAAG,CAACmB,cAAc,CAAC;QAC1C,IAAIC,QAAQ,CAACC,MAAM,EAAE,EAAE;UACrBN,YAAY,CAAEO,UAAU,IAAK;YAC3B,OAAO,CAAC,GAAGA,UAAU,EAAE,GAAGC,MAAM,CAACC,MAAM,CAACJ,QAAQ,CAACK,GAAG,EAAE,CAAC,CAAC;UAC1D,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;QAAA;MAEJ,CAAC,CAAC,OAAOb,KAAK,EAAE;QACdD,UAAU,CAAC,KAAK,CAAC;QACjBE,QAAQ,CAAC,IAAI,CAAC;MAChB;MACAF,UAAU,CAAC,KAAK,CAAC;IACnB;IACAe,UAAU,CAAC,MAAM;MACfV,WAAW,EAAE;IACf,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;EACf,OAAO;IACLE,OAAO;IACPE,KAAK;IACLE;EACF,CAAC;AACH;AAACL,EAAA,CApCuBF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}