{"ast":null,"code":"var _s = $RefreshSig$();\nimport { get, getDatabase, orderByKey, query, ref } from \"firebase/database\";\nimport { useEffect, useState } from \"react\";\nexport default function useVideoList() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(true);\n  const [videos, setVideos] = useState([]);\n  useEffect(() => {\n    async function fetchVideos() {\n      const db = getDatabase();\n      const videoRef = ref(db, \"videos\");\n      const videosQuery = query(videoRef, orderByKey());\n      try {\n        setLoading(true);\n        setError(false);\n        const snapshot = await get(videosQuery);\n        if (snapshot.exists()) {\n          setVideos(prevVedios => {\n            return [...prevVedios, ...Object.values(snapshot.val())];\n          });\n        }\n      } catch (error) {\n        setLoading(false);\n        setError(true);\n      }\n    }\n    fetchVideos();\n  }, []);\n  return {\n    loading,\n    error,\n    videos\n  };\n}\n_s(useVideoList, \"pwdRh7Y3ArRzpEPlAYGgewDvnOE=\");","map":{"version":3,"names":["get","getDatabase","orderByKey","query","ref","useEffect","useState","useVideoList","_s","loading","setLoading","error","setError","videos","setVideos","fetchVideos","db","videoRef","videosQuery","snapshot","exists","prevVedios","Object","values","val"],"sources":["/home/mint/Desktop/react/quiz/src/hooks/useVideoList.js"],"sourcesContent":["import { get, getDatabase, orderByKey, query, ref } from \"firebase/database\";\nimport { useEffect, useState } from \"react\";\n\nexport default function useVideoList() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(true);\n  const [videos, setVideos] = useState([]);\n\n  useEffect(() => {\n    async function fetchVideos() {\n      const db = getDatabase();\n      const videoRef = ref(db, \"videos\");\n      const videosQuery = query(videoRef, orderByKey());\n      try {\n        setLoading(true);\n        setError(false);\n        const snapshot = await get(videosQuery);\n        if (snapshot.exists()) {\n          setVideos((prevVedios) => {\n            return [...prevVedios, ...Object.values(snapshot.val())];\n          });\n        }\n      } catch (error) {\n        setLoading(false);\n        setError(true);\n      }\n    }\n    fetchVideos();\n  }, []);\n  return {\n    loading,\n    error,\n    videos,\n  };\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,EAAEC,GAAG,QAAQ,mBAAmB;AAC5E,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,eAAeU,WAAWA,CAAA,EAAG;MAC3B,MAAMC,EAAE,GAAGf,WAAW,EAAE;MACxB,MAAMgB,QAAQ,GAAGb,GAAG,CAACY,EAAE,EAAE,QAAQ,CAAC;MAClC,MAAME,WAAW,GAAGf,KAAK,CAACc,QAAQ,EAAEf,UAAU,EAAE,CAAC;MACjD,IAAI;QACFQ,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,KAAK,CAAC;QACf,MAAMO,QAAQ,GAAG,MAAMnB,GAAG,CAACkB,WAAW,CAAC;QACvC,IAAIC,QAAQ,CAACC,MAAM,EAAE,EAAE;UACrBN,SAAS,CAAEO,UAAU,IAAK;YACxB,OAAO,CAAC,GAAGA,UAAU,EAAE,GAAGC,MAAM,CAACC,MAAM,CAACJ,QAAQ,CAACK,GAAG,EAAE,CAAC,CAAC;UAC1D,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOb,KAAK,EAAE;QACdD,UAAU,CAAC,KAAK,CAAC;QACjBE,QAAQ,CAAC,IAAI,CAAC;MAChB;IACF;IACAG,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EACN,OAAO;IACLN,OAAO;IACPE,KAAK;IACLE;EACF,CAAC;AACH;AAACL,EAAA,CA/BuBD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}